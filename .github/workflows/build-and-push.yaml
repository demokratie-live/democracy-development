name: Build and Push

on:
  workflow_call:
    inputs:
      changedPackages:
        description: 'Changed Packages'
        required: true
        default: '[]'
        type: string
    secrets:
      DOCKER_USERNAME:
        description: 'Dockerhub Username'
        required: true
      DOCKER_PASSWORD:
        description: 'Dockerhub Token'
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ inputs.changedPackages != '[]'}}
    strategy:
      fail-fast: false
      matrix:
        package: ${{fromJson(inputs.changedPackages)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false
      - run: echo "package=${{ matrix.package }}"
      - name: get directory for package
        id: get-directory
        run: |
          directory=$(pnpm ls -r --json --filter $MATRIX_PACKAGE | jq -r '.[0] | .path')
          directory="${directory##*/democracy-development/}"

          # Ausgabe
          echo "directory=$directory" >> $GITHUB_OUTPUT
        env:
          MATRIX_PACKAGE: ${{ matrix.package }}

      - run: echo "directory=${{ steps.get-directory.outputs.directory }}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: democracy/${{ matrix.package }}
          tags: |
            type=ref,event=branch,enable=${{ github.ref == format('refs/heads/{0}', 'master') || github.ref == format('refs/heads/{0}', 'alpha') || github.ref == format('refs/heads/{0}', 'internal') }}
            type=ref,event=pr
            type=match,asref=foo,pattern=${{ matrix.package }}@v(\d+.\d+.\d+)(-alpha.\d+)?,group=1
            type=semver,pattern={{version}},use=foo
            type=sha,enable=${{ github.event_name == 'workflow_dispatch' }}
      - name: Print Meta Summary
        run: |
          echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}
          " >> $GITHUB_STEP_SUMMARY
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read .node-version
        id: node_version
        run: echo "version=$(cat .node-version | tr -d 'v')" >> $GITHUB_OUTPUT

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/Dockerfile.service
          platforms: linux/amd64,linux/arm64
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-args: |
            SERVICE=${{ matrix.package }}
            SERVICE_PATH=${{ steps.get-directory.outputs.directory }}
            NODE_VERSION=${{ steps.node_version.outputs.version }}
      - name: Move buildx cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
